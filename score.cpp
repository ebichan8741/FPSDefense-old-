//=============================================================================
//
// スコア設定処理 [score.cpp]
// Author : TAKUYA EBIHARA

//
//=============================================================================
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "GameMode.h"
#include "score.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define SCORE_POS_X (SCREEN_WIDTH - SCORE_WIDTH - SCORE_WIDTH / NUM_SCORE)  //スコアのＸ座標
#define SCORE_POS_Y (0.0f)          //スコアのＹ座標
#define SCORE_WIDTH (270.0f)        //スコアの幅
#define SCORE_HEIGHT (70.0f)        //スコアの高さ

int CScore::m_nScore = 0;

//=============================================================================
// コンストラクタ
//=============================================================================
CScore::CScore(int nPriolity):CScene(nPriolity)
{
    m_nScore = 0;
    m_vSize.x = SCORE_WIDTH / NUM_SCORE;
    m_vSize.y = SCORE_HEIGHT;

}

//=============================================================================
// デストラクタ
//=============================================================================
CScore::~CScore(void)
{

}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CScore::Init(void)
{
    return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CScore::Uninit(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void CScore::Update(void)
{
    int Score = m_nScore;

    for (int i = (SCORE_DIGIT - 1); i >= 0; i--) {
        CGameMode::GetScore(i)->SetNumber(Score % 10, 0.0f);

        Score /= 10;
    }
}

//=============================================================================
// 描画処理
//=============================================================================
void CScore::Draw(void)
{

}

//=============================================================================
// スコア生成
//=============================================================================
CScore *CScore::Create(void)
{
    CScore *pScore;

    //メモリの動的確保
    pScore = new CScore(PRIOLITY_2);
    pScore->Init();

    return pScore;
}

//=============================================================================
// スコア加算
//=============================================================================
void CScore::AddScore(int nValue)
{
    m_nScore += nValue;
}

//=============================================================================
// スコア取得
//=============================================================================
int CScore::GetScore(void)
{
    return m_nScore;
}

