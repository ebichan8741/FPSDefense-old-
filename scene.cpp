//=================================================================================================
//
// オブジェクト管理 [scene.cpp]
// Author : TAKUYA EBIHARA
//
//=================================================================================================
#include "main.h"
#include "scene.h"

//=================================================================================================
// 定数定義
//=================================================================================================

//=================================================================================================
// 静的メンバ変数
//=================================================================================================
CScene *CScene::m_Top[];

//*************************************************************************************************
// コンストラクタ
//*************************************************************************************************
CScene::CScene(int nPriolity)
{
    m_pTexture = NULL;

    //リストのトップを設定
    if(m_Top[nPriolity] == NULL)
    {
        m_Top[nPriolity] = this;
    }
    //リストのトップが決まっているとき
    else
    {
        CScene *scene = m_Top[nPriolity];
        //次へのポインタがNULLの場所を探す
        while(scene->m_Next != NULL)
        {
            scene = scene->m_Next;
        }
        //次へのポインタを自分に設定
        scene->m_Next = this;
    }

    this->m_Next = NULL;
}

//*************************************************************************************************
// デストラクタ
//*************************************************************************************************

//*************************************************************************************************
// 全更新
//*************************************************************************************************
void CScene::UpdateAll(void)
{
    CScene *scene;
    CScene *sceneNext;
    CScene *scenePrev;

    for(int i = 0;i < PRIOLITY_MAX;i++)
    {
        scene = m_Top[i];

        //更新処理
        while(scene != NULL)
        {
            sceneNext = scene->m_Next;
            scene->Update();
            scene = sceneNext;
        }

        //解放処理
        scene = m_Top[i];
        scenePrev = m_Top[i];
        while(scene != NULL)
        {
            //次へのポインタを保存
            sceneNext = scene->m_Next;

            //解放予約がされている時
            if(scene->m_Delete == true)
            {
                //リストの先頭の場合
                if(scene == m_Top[i])
                {
                    m_Top[i] = scene->m_Next;
                }
                //先頭以外
                else
                {
                    scenePrev->m_Next = scene->m_Next;
                }
                scene->Uninit();
                delete scene;
            }
            //予約されていない時
            else
            {
                //自分を一つ前に
                scenePrev = scene;
            }
            //次のポインタを自分に
            scene = sceneNext;
        }
    }
}

//*************************************************************************************************
// 全描画
//*************************************************************************************************
void CScene::DrawAll(void)
{
    CScene *scene;

    for(int i = 0;i < PRIOLITY_MAX;i++)
    {
        scene = m_Top[i];
        while(scene != NULL)
        {
            scene->Draw();
            scene = scene->m_Next;
        }
    }
}

//*************************************************************************************************
// 全てを解放
//*************************************************************************************************
void CScene::ReleaseAll(void)
{
    CScene *scene;
    CScene *sceneNext;

    for(int i = 0;i < PRIOLITY_MAX;i++)
    {
        scene = m_Top[i];
        while(scene != NULL)
        {
            sceneNext = scene->m_Next;
            scene->Uninit();
            delete scene;
            scene = sceneNext;
        }
        m_Top[i] = NULL;
    }
}

//*************************************************************************************************
// 自分自身を解放
//*************************************************************************************************
void CScene::Release(void)
{

    m_Delete = true;
}

//*************************************************************************************************
// 座標の取得
//*************************************************************************************************
D3DXVECTOR3 CScene::GetPosition(void)
{
    return m_vPos;
}

//*************************************************************************************************
// サイズの取得
//*************************************************************************************************
D3DXVECTOR3 CScene::GetSize(void)
{
    return m_vSize;
}

//*************************************************************************************************
// サイズの取得
//*************************************************************************************************
float CScene::GetLength(void)
{
    return m_LengthSq;
}

//*************************************************************************************************
// リストの先頭ポインタの取得
//*************************************************************************************************
CScene *CScene::GetList(int nPriority)
{
    return m_Top[nPriority];
}

//*************************************************************************************************
// オブジェクトタイプの取得
//*************************************************************************************************
SCENE_TYPE CScene::GetType(void)
{
    return m_Type;
}

//*************************************************************************************************
// ネクストポインタの取得
//*************************************************************************************************
CScene* CScene::GetNext(void)
{
    return m_Next;
}
